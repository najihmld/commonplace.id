{
  "ðŸŸ¨ consoleLog": {
    "prefix": "clg.$clg",
    "body": ["console.log(${1:data})"],
    "description": "console.log",
    "scope": "javascript,typescript,javascriptreact,typescriptreact"
  },
  "ðŸŸ¨ consoleLogWithLabel": {
    "prefix": "cll.$cll.clg(labelled)",
    "body": ["console.log('${1:data}', ${1:data})"],
    "description": "console.log with label",
    "scope": "javascript,typescript,javascriptreact,typescriptreact"
  },
  "ðŸŸ¨ arrowFunction": {
    "prefix": "af.$af",
    "body": ["const ${1:myFunction} = ($2) => {", "\t${3:// code}", "}"],
    "description": "Arrow function",
    "scope": "javascript,typescript,javascriptreact,typescriptreact"
  },
  "ðŸŸ¨ asyncArrowFunction": {
    "prefix": "afa.$afa",
    "body": ["const ${1:myFunction} = async ($2) => {", "\t${3:// code}", "}"],
    "description": "Async arrow function",
    "scope": "javascript,typescript,javascriptreact,typescriptreact"
  },
  "ðŸŸ¨ arrowFunctionExport": {
    "prefix": "afe.$afe",
    "body": ["export const ${1:myFunction} = ($2) => {", "\t${3:// code}", "}"],
    "description": "Arrow function export",
    "scope": "javascript,typescript,javascriptreact,typescriptreact"
  },
  "ðŸŸ¨ reactFnCompExport": {
    "prefix": "rFCe.$rFCe",
    "body": [
      "function ${1:${RELATIVE_FILEPATH/(\\.[jt]sx?$|[\\/\\\\](?:index|\\[).*|.+[\\/\\\\](?!(?:index|page|\\[))|[.\\-_\\/\\\\])|(\\w+)/${2:/capitalize}/g}}() {$0",
      "\treturn (",
      "\t\t<${2:div}>${3:$1}</$2>",
      "\t)",
      "}",
      "",
      "export default $1",
      ""
    ],
    "description": "React Functional Component",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¦ TS ReactFnCompExport": {
    "prefix": "rFCe.TS.$$rFCe.(type)",
    "body": [
      "type Props = {",
      "\t$2: React.ReactNode;",
      "}",
      "",
      "function ${1:${RELATIVE_FILEPATH/(\\.[jt]sx?$|[\\/\\\\](?:index|\\[).*|.+[\\/\\\\](?!(?:index|page|\\[))|[.\\-_\\/\\\\])|(\\w+)/${2:/capitalize}/g}}({ ${2:children} }: Props) {$0",
      "\treturn (",
      "\t\t<${3:div}>${4:$1}</$3>",
      "\t)",
      "}",
      "",
      "export default $1",
      ""
    ],
    "description": "React Functional Component",
    "scope": "javascript,typescript,javascriptreact,typescriptreact"
  },
  "ðŸŸ¦ TS ReactFnCompExportV2": {
    "prefix": "rFCe.TS.$$rFCe.(interface)",
    "body": [
      "interface Props {",
      "\t$2: React.ReactNode;",
      "}",
      "",
      "function ${1:${RELATIVE_FILEPATH/(\\.[jt]sx?$|[\\/\\\\](?:index|\\[).*|.+[\\/\\\\](?!(?:index|page|\\[))|[.\\-_\\/\\\\])|(\\w+)/${2:/capitalize}/g}}({ ${2:children} }: Props) {$0",
      "\treturn (",
      "\t\t<${3:div}>${4:$1}</$3>",
      "\t)",
      "}",
      "",
      "export default $1",
      ""
    ],
    "description": "React Functional Component",
    "scope": "javascript,typescript,javascriptreact,typescriptreact"
  },
  "ðŸŸ¦ TS UseState": {
    "prefix": "useState.TS.$$useState",
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState$4<${3:any}>($2)"
    ],
    "description": "React useState",
    "scope": "javascript,typescript,javascriptreact,typescriptreact"
  },
  "ðŸŸ¦ TS UseRef": {
    "prefix": "useRef.TS.$$useRef",
    "body": ["const ${1:ref} = useRef$4<${3:HTMLDivElement}>(${2:null})"],
    "description": "React useRef",
    "scope": "javascript,typescript,javascriptreact,typescriptreact"
  },
  "ðŸŸ¦ TS UseMemo": {
    "prefix": "useMemo.TS.$$useMemo",
    "body": [
      "const ${1:memo} = useMemo$5<${4:any}>(() => ${3:computeValue}, [$2])"
    ],
    "description": "React useMemo",
    "scope": "javascript,typescript,javascriptreact,typescriptreact"
  },
  "ðŸŸ¦ TS UseCallback": {
    "prefix": "useCallback.TS.$$useCallback",
    "body": [
      "const ${1:callback} = useCallback$5<() => ${4:void}>(() => {",
      "\t${3:// code}",
      "}, [$2])"
    ],
    "description": "React useCallback",
    "scope": "javascript,typescript,javascriptreact,typescriptreact"
  }
}
